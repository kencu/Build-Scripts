# Written and placed in public domain by Jeffrey Walton.
# This patch fixes some issues with GetText.
# https://lists.gnu.org/archive/html/bug-gnulib/2019-07/msg00058.html
--- gettext-runtime/gnulib-lib/xalloc-oversized.h
+++ gettext-runtime/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- libtextstyle/lib/xalloc-oversized.h
+++ libtextstyle/lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/libgettextpo/xalloc-oversized.h
+++ gettext-tools/libgettextpo/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-tools/gnulib-lib/xalloc-oversized.h
+++ gettext-tools/gnulib-lib/xalloc-oversized.h
@@ -27,6 +27,7 @@
    By gnulib convention, SIZE_MAX represents overflow in size
    calculations, so the conservative size_t-based dividend to use here
    is SIZE_MAX - 1.  */
+#undef __xalloc_oversized
 #define __xalloc_oversized(n, s) \
   ((size_t) (PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX - 1) / (s) < (n))
 
@@ -42,9 +43,11 @@
    function, so that it works correctly even when SIZE_MAX < N.  */
 
 #if 7 <= __GNUC__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
@@ -54,6 +57,7 @@
 /* Other compilers use integer division; this may be slower but is
    more portable.  */
 #else
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) __xalloc_oversized (n, s)
 #endif
 
--- gettext-runtime/gnulib-lib/xalloc.h
+++ gettext-runtime/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- libtextstyle/lib/xalloc.h
+++ libtextstyle/lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gnulib-local/lib/xalloc.h
+++ gnulib-local/lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/libgettextpo/xalloc.h
+++ gettext-tools/libgettextpo/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/gnulib-lib/xalloc.h
+++ gettext-tools/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+# undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 
--- gettext-tools/libgrep/cdefs.h
+++ gettext-tools/libgrep/cdefs.h
@@ -51,7 +51,7 @@
    gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
    as non-throwing using a function attribute since programs can use
    the -fexceptions options for C code as well.  */
-# if !defined __cplusplus && __GNUC_PREREQ (3, 3)
+# if !defined __cplusplus && __GNUC_PREREQ (4, 0)
 #  define __THROW	__attribute__ ((__nothrow__ __LEAF))
 #  define __THROWNL	__attribute__ ((__nothrow__))
 #  define __NTH(fct)	__attribute__ ((__nothrow__ __LEAF)) fct
