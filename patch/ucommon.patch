--- openssl/digest.cpp
+++ openssl/digest.cpp
@@ -18,6 +18,21 @@
 
 #include "local.h"
 
+#ifdef HAVE_OPENSSL_OPENSSLV_H
+#include <openssl/opensslv.h>
+#endif
+
+#ifdef HAVE_OPENSSL_CRYPTO_H
+#include <openssl/crypto.h>
+#endif
+
+#ifdef HAVE_OPENSSL_EVP_H
+#include <openssl/evp.h>
+#endif
+
+#include <stdexcept>
+#include <cassert>
+
 namespace ucommon {
 
 bool Digest::has(const char *id)
@@ -36,26 +51,49 @@
         type = "sha1";
 
     hashtype = (void *)EVP_get_digestbyname(type);
-    if(hashtype) {
+    assert(hashtype != NULL);
+
+    if (hashtype)
+    {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        context = EVP_MD_CTX_new();
+        assert(context != NULL);
+
+        if (context) {
+            int rc = EVP_DigestInit_ex((EVP_MD_CTX*)context, (const EVP_MD*)hashtype, NULL);
+            if (rc != 1) throw std::runtime_error("EVP_DigestInit_ex failed");
+        }
+#else
         context = new EVP_MD_CTX;
-        EVP_MD_CTX_init((EVP_MD_CTX *)context);
-        EVP_DigestInit_ex((EVP_MD_CTX *)context, (const EVP_MD *)hashtype, NULL);
+        assert(context != NULL);
+
+        if (context) {
+            EVP_MD_CTX_init((EVP_MD_CTX *)context);
+            EVP_DigestInit_ex((EVP_MD_CTX *)context, (const EVP_MD *)hashtype, NULL);
+        }
+#endif
     }
 }
 
 void Digest::release(void)
 {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    if(context)
+        EVP_MD_CTX_free((EVP_MD_CTX *)context);
+    context = NULL;
+#else
     if(context)
         EVP_MD_CTX_cleanup((EVP_MD_CTX *)context);
 
     if(context) {
-        memset(context, 0, sizeof(EVP_MD_CTX));
+        OPENSSL_cleanse(context, sizeof(EVP_MD_CTX));
         delete (EVP_MD_CTX *)context;
         context = NULL;
     }
+#endif
 
     bufsize = 0;
-    memset(textbuf, 0, sizeof(textbuf));
+    OPENSSL_cleanse(textbuf, sizeof(textbuf));
 }
 
 bool Digest::put(const void *address, size_t size)
@@ -63,23 +101,48 @@
     if(!context)
         return false;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int rc = EVP_DigestUpdate((EVP_MD_CTX *)context, address, size);
+    return rc == 1;
+#else
     EVP_DigestUpdate((EVP_MD_CTX *)context, address, size);
     return true;
+#endif
 }
 
 void Digest::reset(void)
 {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    if(!context) {
+        if(hashtype) {
+            context = EVP_MD_CTX_new();
+            assert(context != NULL);
+        }
+        else
+            return;
+    }
+
+    if (context) {
+        int rc = EVP_DigestInit_ex((EVP_MD_CTX*)context, (const EVP_MD*)hashtype, NULL);
+        if (rc != 1) throw std::runtime_error("EVP_DigestInit_ex failed");
+        bufsize = 0;
+    }
+#else
     if(!context) {
         if(hashtype) {
             context = new EVP_MD_CTX;
+            assert(context != NULL);
             EVP_MD_CTX_init((EVP_MD_CTX *)context);
         }
         else
             return;
     }
 
-    EVP_DigestInit_ex((EVP_MD_CTX *)context, (const EVP_MD *)hashtype, NULL);
-    bufsize = 0;
+    if (context) {
+        EVP_DigestInit_ex((EVP_MD_CTX *)context, (const EVP_MD *)hashtype, NULL);
+        bufsize = 0;
+    }
+#endif
 }
 
 void Digest::recycle(bool bin)
@@ -89,6 +152,31 @@
     if(!context)
         return;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int rc;
+    if(!bufsize) {
+        rc = EVP_DigestFinal_ex((EVP_MD_CTX *)context, buffer, &size);
+        if (rc != 1) throw std::runtime_error("EVP_DigestFinal_ex failed");
+    }
+
+    rc = EVP_DigestInit_ex((EVP_MD_CTX *)context, (const EVP_MD *)hashtype, NULL);
+    if (rc != 1) throw std::runtime_error("EVP_DigestInit_ex failed");
+
+    if(bin) {
+        rc = EVP_DigestUpdate((EVP_MD_CTX *)context, buffer, size);
+        if (rc != 1) throw std::runtime_error("EVP_DigestUpdate failed");
+    }
+    else {
+        unsigned count = 0;
+        while(count < size) {
+            snprintf(textbuf + (count * 2), 3, "%2.2x", buffer[count]);
+            ++count;
+        }
+        rc = EVP_DigestUpdate((EVP_MD_CTX *)context, textbuf, size * 2);
+        if (rc != 1) throw std::runtime_error("EVP_DigestUpdate failed");
+    }
+    bufsize = 0;
+#else
     if(!bufsize)
         EVP_DigestFinal_ex((EVP_MD_CTX *)context, buffer, &size);
 
@@ -99,15 +187,13 @@
     else {
         unsigned count = 0;
         while(count < size) {
-            snprintf(textbuf + (count * 2), 3, "%2.2x",
-buffer[count]);
+            snprintf(textbuf + (count * 2), 3, "%2.2x", buffer[count]);
             ++count;
         }
-        EVP_DigestUpdate((EVP_MD_CTX *)context, textbuf, size *
-2);
+        EVP_DigestUpdate((EVP_MD_CTX *)context, textbuf, size * 2);
     }
     bufsize = 0;
-
+#endif
 }
 
 const uint8_t *Digest::get(void)
@@ -121,7 +207,12 @@
     if(!context)
         return NULL;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int rc = EVP_DigestFinal_ex((EVP_MD_CTX *)context, buffer, &size);
+    if (rc != 1) throw std::runtime_error("EVP_DigestFinal_ex failed");
+#else
     EVP_DigestFinal_ex((EVP_MD_CTX *)context, buffer, &size);
+#endif
 
     release();
 
--- openssl/random.cpp
+++ openssl/random.cpp
@@ -18,6 +18,14 @@
 
 #include "local.h"
 
+#ifdef HAVE_OPENSSL_OPENSSLV_H
+#include <openssl/opensslv.h>
+#endif
+
+#ifdef HAVE_OPENSSL_RAND_H
+#include <openssl/rand.h>
+#endif
+
 namespace ucommon {
 
 void Random::seed(void)
@@ -47,9 +55,15 @@
 {
     secure::init();
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    if(RAND_bytes(buf, (int)size))
+        return size;
+    return 0;
+#else
     if(RAND_pseudo_bytes(buf, (int)size))
         return size;
     return 0;
+#endif
 }
 
 bool Random::status(void)
--- openssl/cipher.cpp
+++ openssl/cipher.cpp
@@ -18,6 +18,17 @@
 
 #include "local.h"
 
+#ifdef HAVE_OPENSSL_OPENSSLV_H
+#include <openssl/opensslv.h>
+#endif
+
+#ifdef HAVE_OPENSSL_EVP_H
+#include <openssl/evp.h>
+#endif
+
+#include <stdexcept>
+#include <cassert>
+
 static const uint8_t *_salt = NULL;
 static unsigned _rounds = 1;
 
@@ -76,6 +87,7 @@
         String::set(fpart, sizeof(algoname), fpart + 1);
 
     algotype = EVP_get_cipherbyname(algoname);
+    assert(algotype != NULL);
 
     if(!algotype)
         return;
@@ -96,7 +108,10 @@
     if(fpart && fpart == lpart)
         String::set(fpart, sizeof(algoname), fpart + 1);
 
-    return (EVP_get_cipherbyname(algoname) != NULL);
+    const EVP_CIPHER * cipher = EVP_get_cipherbyname(algoname);
+    assert(cipher != NULL);
+
+    return (cipher != NULL);
 }
 
 void Cipher::push(uint8_t *address, size_t size)
@@ -105,12 +120,19 @@
 
 void Cipher::release(void)
 {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    keys.clear();
+    if(context)
+        EVP_CIPHER_CTX_free((EVP_CIPHER_CTX*)context);
+    context = NULL;
+#else
     keys.clear();
     if(context) {
         EVP_CIPHER_CTX_cleanup((EVP_CIPHER_CTX*)context);
         delete (EVP_CIPHER_CTX*)context;
         context = NULL;
     }
+#endif
 }
 
 void Cipher::set(const key_t key, mode_t mode, uint8_t *address, size_t size)
@@ -125,10 +147,23 @@
     if(!keys.keysize)
         return;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    context = EVP_CIPHER_CTX_new();
+    assert(context != NULL);
+
+    if (context)
+    {
+        int rc = EVP_CipherInit_ex((EVP_CIPHER_CTX *)context, (EVP_CIPHER *)keys.algotype, NULL, keys.keybuf, keys.ivbuf, (int)mode);
+        if (rc != 1) throw std::runtime_error("EVP_CipherInit_ex failed");
+        rc = EVP_CIPHER_CTX_set_padding((EVP_CIPHER_CTX *)context, 0);
+        if (rc != 1) throw std::runtime_error("EVP_CIPHER_CTX_set_padding failed");
+    }
+#else
     context = new EVP_CIPHER_CTX;
     EVP_CIPHER_CTX_init((EVP_CIPHER_CTX *)context);
     EVP_CipherInit_ex((EVP_CIPHER_CTX *)context, (EVP_CIPHER *)keys.algotype, NULL, keys.keybuf, keys.ivbuf, (int)mode);
     EVP_CIPHER_CTX_set_padding((EVP_CIPHER_CTX *)context, 0);
+#endif
 }
 
 size_t Cipher::put(const uint8_t *data, size_t size)
--- openssl/hmac.cpp
+++ openssl/hmac.cpp
@@ -18,75 +18,128 @@
 
 #include "local.h"
 
+#ifdef HAVE_OPENSSL_OPENSSLV_H
+#include <openssl/opensslv.h>
+#endif
+
+#ifdef HAVE_OPENSSL_CRYPTO_H
+#include <openssl/crypto.h>
+#endif
+
+#ifdef HAVE_OPENSSL_EVP_H
+#include <openssl/evp.h>
+#endif
+
+#include <stdexcept>
+#include <cassert>
+
 namespace ucommon {
 
 bool HMAC::has(const char *id)
 {
-    return (EVP_get_digestbyname(id) != NULL);
+	return (EVP_get_digestbyname(id) != NULL);
 }
 
 void HMAC::set(const char *digest, const secure::keybytes& key)
 {
-    secure::init();
+	secure::init();
 
-    release();
+	release();
 
-    size_t len = key.size() / 8;
+	size_t len = key.size() / 8;
 
-    hmactype = EVP_get_digestbyname(digest);
-    if(hmactype && len) {
-        context = new ::HMAC_CTX;
-        HMAC_CTX_init((HMAC_CTX *)context);
-        HMAC_Init((HMAC_CTX *)context, *key, (int)len, (const EVP_MD *)hmactype);
-    }
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	hmactype = EVP_get_digestbyname(digest);
+	assert(hmactype != NULL);
+
+	if(hmactype && len) {
+		context = HMAC_CTX_new();
+		assert(context != NULL);
+
+		if (context) {
+			int rc = HMAC_Init_ex((HMAC_CTX *)context, *key, (int)len, (const EVP_MD *)hmactype, NULL);
+			if (rc != 1) throw std::runtime_error("HMAC_Init_ex failed");
+		}
+	}
+#else
+	hmactype = EVP_get_digestbyname(digest);
+	assert(hmactype != NULL);
+
+	if(hmactype && len) {
+		context = new HMAC_CTX;
+		assert(context != NULL);
+
+		if (context) {
+			HMAC_CTX_init((HMAC_CTX *)context);
+			HMAC_Init((HMAC_CTX *)context, *key, (int)len, (const EVP_MD *)hmactype);
+		}
+	}
+#endif
 }
 
 void HMAC::release(void)
 {
-    if(context) {
-        HMAC_cleanup((HMAC_CTX *)context);
-        memset(context, 0, sizeof(HMAC_CTX));
-        delete (HMAC_CTX *)context;
-        context = NULL;
-    }
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	if(context)
+		HMAC_CTX_free((HMAC_CTX *)context);
+	context = NULL;
+#else
+	if(context) {
+		HMAC_cleanup((HMAC_CTX *)context);
+		OPENSSL_cleanse(context, sizeof(HMAC_CTX));
+		delete (HMAC_CTX *)context;
+		context = NULL;
+	}
+#endif
 
-    bufsize = 0;
-    memset(textbuf, 0, sizeof(textbuf));
+	bufsize = 0;
+	OPENSSL_cleanse(textbuf, sizeof(textbuf));
 }
 
 bool HMAC::put(const void *address, size_t size)
 {
-    if(!context)
-        return false;
+	if(!context)
+		return false;
 
-    HMAC_Update((HMAC_CTX *)context, (const uint8_t *)address, size);
-    return true;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	int rc = HMAC_Update((HMAC_CTX *)context, (const uint8_t *)address, size);
+	return rc == 1;
+#else
+	HMAC_Update((HMAC_CTX *)context, (const uint8_t *)address, size);
+	return true;
+#endif
 }
 
 const uint8_t *HMAC::get(void)
 {
-    unsigned count = 0;
-    unsigned size = 0;
+	unsigned count = 0;
+	unsigned size = 0;
 
-    if(bufsize)
-        return buffer;
+	if(bufsize)
+		return buffer;
 
-    if(!context)
-        return NULL;
+	if(!context)
+		return NULL;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	int rc = HMAC_Final((HMAC_CTX *)context, buffer, &size);
+	if (rc != 1) throw std::runtime_error("HMAC_Final failed");
+#else
 	HMAC_Final((HMAC_CTX *)context, buffer, &size);
+#endif
+
 	release();
 
 	if(!size)
 		return NULL;
 
-    bufsize = size;
+	bufsize = size;
 
-    while(count < bufsize) {
-        snprintf(textbuf + (count * 2), 3, "%2.2x", buffer[count]);
-        ++count;
-    }
-    return buffer;
+	while(count < bufsize) {
+		snprintf(textbuf + (count * 2), 3, "%2.2x", buffer[count]);
+		++count;
+	}
+	return buffer;
 }
 
 } // namespace ucommon
--- commoncpp/tcp.cpp
+++ commoncpp/tcp.cpp
@@ -482,10 +482,13 @@
 TCPStream::~TCPStream()
 {
 #ifdef  CCXX_EXCEPTIONS
-        try { endStream(); }
-        catch( ... ) { if ( ! std::uncaught_exception()) throw;};
+    try { endStream(); }
+    catch( ... ) {  // ugh...
+        if (! std::uncaught_exception())
+            throw;  // rethrow
+    };
 #else
-        endStream();
+    endStream();
 #endif
 }
 
--- corelib/arrayref.cpp
+++ corelib/arrayref.cpp
@@ -212,7 +212,7 @@
 
 void ArrayRef::clear(void)
 {
-    reset(nullptr);
+    reset(NULL);
 }
 
 ArrayRef::Array *ArrayRef::create(arraytype_t mode, size_t size)
--- corelib/atomic.cpp
+++ corelib/atomic.cpp
@@ -468,7 +468,7 @@
             --base;
         }
         ::free(base);
-        address = nullptr;
+        address = NULL;
     }
 }
 
--- corelib/linked.cpp
+++ corelib/linked.cpp
@@ -26,7 +26,7 @@
 
 LinkedObject::LinkedObject(LinkedObject **root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
     enlist(root);
 }
 
@@ -38,7 +38,7 @@
 {
     LinkedObject *after;
 
-    assert(root != nullptr);
+    assert(root != NULL);
 
     while(root) {
         after = root->Next;
@@ -49,7 +49,7 @@
 
 bool LinkedObject::is_member(LinkedObject *list) const
 {
-    assert(list != nullptr);
+    assert(list != NULL);
 
     while(list) {
         if(list == this)
@@ -61,7 +61,7 @@
 
 void LinkedObject::enlist(LinkedObject **root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
     Next = *root;
     *root = this;
@@ -69,9 +69,9 @@
 
 void LinkedObject::delist(LinkedObject **root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
-    LinkedObject *prior = nullptr, *node = *root;
+    LinkedObject *prior = NULL, *node = *root;
 
     while(node && node != this) {
         prior = node;
@@ -89,22 +89,22 @@
 
 void ReusableObject::release(void)
 {
-    Next = nullptr;
+    Next = NULL;
 }
 
 NamedObject::NamedObject() :
 OrderedObject()
 {
-    Id = nullptr;
+    Id = NULL;
 }
 
 NamedObject::NamedObject(OrderedIndex *root, char *nid) :
 OrderedObject()
 {
-    assert(root != nullptr);
-    assert(nid != nullptr && *nid != 0);
+    assert(root != NULL);
+    assert(nid != NULL && *nid != 0);
 
-    NamedObject *node = static_cast<NamedObject*>(root->head), *prior = nullptr;
+    NamedObject *node = static_cast<NamedObject*>(root->head), *prior = NULL;
 
     while(node) {
         if(node->equal(nid)) {
@@ -118,7 +118,7 @@
         prior = node;
         node = node->getNext();
     }
-    Next = nullptr;
+    Next = NULL;
     Id = nid;
     if(!root->head)
         root->head = this;
@@ -135,23 +135,23 @@
 NamedObject::NamedObject(NamedObject **root, char *nid, unsigned max) :
 OrderedObject()
 {
-    assert(root != nullptr);
-    assert(nid != nullptr && *nid != 0);
+    assert(root != NULL);
+    assert(nid != NULL && *nid != 0);
     assert(max > 0);
 
-    Id = nullptr;
+    Id = NULL;
     add(root, nid, max);
 }
 
 void NamedObject::add(NamedObject **root, char *nid, unsigned max)
 {
-    assert(root != nullptr);
-    assert(nid != nullptr && *nid != 0);
+    assert(root != NULL);
+    assert(nid != NULL && *nid != 0);
     assert(max > 0);
 
     clearId();
 
-    NamedObject *node, *prior = nullptr;
+    NamedObject *node, *prior = NULL;
 
     if(max < 2)
         max = 0;
@@ -185,7 +185,7 @@
 {
     if(Id) {
         free(Id);
-        Id = nullptr;
+        Id = NULL;
     }
 }
 
@@ -217,7 +217,7 @@
 
 LinkedObject *LinkedObject::getIndexed(LinkedObject *root, unsigned index)
 {
-    while(index-- && root != nullptr)
+    while(index-- && root != NULL)
         root = root->Next;
 
     return root;
@@ -225,7 +225,7 @@
 
 unsigned LinkedObject::count(const LinkedObject *root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
     unsigned c = 0;
     while(root) {
@@ -237,7 +237,7 @@
 
 unsigned NamedObject::keyindex(const char *id, unsigned max)
 {
-    assert(id != nullptr && *id != 0);
+    assert(id != NULL && *id != 0);
     assert(max > 1);
 
     unsigned val = 0;
@@ -250,7 +250,7 @@
 
 int NamedObject::compare(const char *cid) const
 {
-    assert(cid != nullptr && *cid != 0);
+    assert(cid != NULL && *cid != 0);
 
 #ifdef  HAVE_STRCOLL
     return strcoll(Id, cid);
@@ -263,8 +263,8 @@
 
     static int ncompare(const void *o1, const void *o2)
     {
-        assert(o1 != nullptr);
-        assert(o2 != nullptr);
+        assert(o1 != NULL);
+        assert(o2 != NULL);
         const NamedObject * const *n1 = static_cast<const NamedObject * const*>(o1);
         const NamedObject * const*n2 = static_cast<const NamedObject * const*>(o2);
         return ((*n1)->compare((*n2)->getId()));
@@ -273,7 +273,7 @@
 
 NamedObject **NamedObject::sort(NamedObject **list, size_t size)
 {
-    assert(list != nullptr);
+    assert(list != NULL);
 
     if(!size) {
         while(list[size])
@@ -286,23 +286,23 @@
 
 NamedObject **NamedObject::index(NamedObject **idx, unsigned max)
 {
-    assert(idx != nullptr);
+    assert(idx != NULL);
     assert(max > 0);
     NamedObject **op = new NamedObject *[count(idx, max) + 1];
     unsigned pos = 0;
-    NamedObject *node = skip(idx, nullptr, max);
+    NamedObject *node = skip(idx, NULL, max);
 
     while(node) {
         op[pos++] = node;
         node = skip(idx, node, max);
     }
-    op[pos] = nullptr;
+    op[pos] = NULL;
     return op;
 }
 
 NamedObject *NamedObject::skip(NamedObject **idx, NamedObject *rec, unsigned max)
 {
-    assert(idx != nullptr);
+    assert(idx != NULL);
     assert(max > 0);
 
     unsigned key = 0;
@@ -313,7 +313,7 @@
         while(key < max && !idx[key])
             ++key;
         if(key >= max)
-            return nullptr;
+            return NULL;
         return idx[key];
     }
 
@@ -322,7 +322,7 @@
 
 void NamedObject::purge(NamedObject **idx, unsigned max)
 {
-    assert(idx != nullptr);
+    assert(idx != NULL);
     assert(max > 0);
 
     LinkedObject *root;
@@ -338,7 +338,7 @@
 
 unsigned NamedObject::count(NamedObject **idx, unsigned max)
 {
-    assert(idx != nullptr);
+    assert(idx != NULL);
     assert(max > 0);
 
     unsigned count = 0;
@@ -359,8 +359,8 @@
 
 NamedObject *NamedObject::remove(NamedObject **idx, const char *id, unsigned max)
 {
-    assert(idx != nullptr);
-    assert(id != nullptr && *id != 0);
+    assert(idx != NULL);
+    assert(id != NULL && *id != 0);
     assert(max > 0);
 
     if(max < 2)
@@ -371,8 +371,8 @@
 
 NamedObject *NamedObject::map(NamedObject **idx, const char *id, unsigned max)
 {
-    assert(idx != nullptr);
-    assert(id != nullptr && *id != 0);
+    assert(idx != NULL);
+    assert(id != NULL && *id != 0);
     assert(max > 0);
 
     if(max < 2)
@@ -383,7 +383,7 @@
 
 NamedObject *NamedObject::find(NamedObject *root, const char *id)
 {
-    assert(id != nullptr && *id != 0);
+    assert(id != NULL && *id != 0);
 
     while(root) {
         if(root->equal(id))
@@ -395,10 +395,10 @@
 
 NamedObject *NamedObject::remove(NamedObject **root, const char *id)
 {
-    assert(id != nullptr && *id != 0);
-    assert(root != nullptr);
+    assert(id != NULL && *id != 0);
+    assert(root != NULL);
 
-    NamedObject *prior = nullptr;
+    NamedObject *prior = NULL;
     NamedObject *node = *root;
 
     while(node) {
@@ -409,9 +409,9 @@
     }
 
     if(!node)
-        return nullptr;
+        return NULL;
 
-    if(prior == nullptr)
+    if(prior == NULL)
         *root = node->getNext();
     else
         prior->Next = node->getNext();
@@ -427,21 +427,21 @@
 NamedObject(), Child()
 {
     Id = nid;
-    Parent = nullptr;
+    Parent = NULL;
 }
 
 NamedTree::NamedTree(const NamedTree& source)
 {
     Id = source.Id;
-    Parent = nullptr;
+    Parent = NULL;
     Child = source.Child;
 }
 
 NamedTree::NamedTree(NamedTree *p, char *nid) :
 NamedObject(), Child()
 {
-    assert(p != nullptr);
-    assert(nid != nullptr && *nid != 0);
+    assert(p != NULL);
+    assert(nid != NULL && *nid != 0);
 
     enlistTail(&p->Child);
     Id = nid;
@@ -450,13 +450,13 @@
 
 NamedTree::~NamedTree()
 {
-    Id = nullptr;
+    Id = NULL;
     purge();
 }
 
 NamedTree *NamedTree::getChild(const char *tid) const
 {
-    assert(tid != nullptr && *tid != 0);
+    assert(tid != NULL && *tid != 0);
 
     linked_pointer<NamedTree> node = Child.begin();
 
@@ -465,7 +465,7 @@
             return *node;
         node.next();
     }
-    return nullptr;
+    return NULL;
 }
 
 void NamedTree::relistTail(NamedTree *trunk)
@@ -495,7 +495,7 @@
 
 NamedTree *NamedTree::path(const char *tid) const
 {
-    assert(tid != nullptr && *tid != 0);
+    assert(tid != NULL && *tid != 0);
 
     const char *np;
     char buf[65];
@@ -507,7 +507,7 @@
 
     while(*tid == '.') {
         if(!node->Parent)
-            return nullptr;
+            return NULL;
         node = node->Parent;
 
         ++tid;
@@ -522,7 +522,7 @@
         if(np)
             tid = ++np;
         else
-            tid = nullptr;
+            tid = NULL;
         node = node->getChild(buf);
     }
     return node;
@@ -530,7 +530,7 @@
 
 NamedTree *NamedTree::getLeaf(const char *tid) const
 {
-    assert(tid != nullptr && *tid != 0);
+    assert(tid != NULL && *tid != 0);
 
     linked_pointer<NamedTree> node = Child.begin();
 
@@ -539,12 +539,12 @@
             return *node;
         node.next();
     }
-    return nullptr;
+    return NULL;
 }
 
 NamedTree *NamedTree::leaf(const char *tid) const
 {
-    assert(tid != nullptr && *tid != 0);
+    assert(tid != NULL && *tid != 0);
 
     linked_pointer<NamedTree> node = Child.begin();
     NamedTree *obj;
@@ -552,19 +552,19 @@
     while(node) {
         if(node->is_leaf() && eq(node->Id, tid))
             return *node;
-        obj = nullptr;
+        obj = NULL;
         if(!node->is_leaf())
             obj = node->leaf(tid);
         if(obj)
             return obj;
         node.next();
     }
-    return nullptr;
+    return NULL;
 }
 
 NamedTree *NamedTree::find(const char *tid) const
 {
-    assert(tid != nullptr && *tid != 0);
+    assert(tid != NULL && *tid != 0);
 
     linked_pointer<NamedTree> node = Child.begin();
     NamedTree *obj;
@@ -579,12 +579,12 @@
         }
         node.next();
     }
-    return nullptr;
+    return NULL;
 }
 
 void NamedTree::setId(char *nid)
 {
-    assert(nid != nullptr && *nid != 0);
+    assert(nid != NULL && *nid != 0);
 
     Id = nid;
 }
@@ -597,7 +597,7 @@
     if(Parent)
         delist(&Parent->Child);
 
-    Id = nullptr;
+    Id = NULL;
 }
 
 void NamedTree::purge(void)
@@ -612,7 +612,7 @@
         obj = *node;
 		if (!obj)
 			break;
-        obj->Parent = nullptr; // save processing
+        obj->Parent = NULL; // save processing
         node = obj->getNext();
         delete obj;
     }
@@ -624,12 +624,12 @@
 
 LinkedObject::LinkedObject()
 {
-    Next = nullptr;
+    Next = NULL;
 }
 
 LinkedObject::LinkedObject(const LinkedObject& from)
 {
-    Next = nullptr;
+    Next = NULL;
 }
 
 OrderedObject::OrderedObject() : LinkedObject()
@@ -643,16 +643,16 @@
 OrderedObject::OrderedObject(OrderedIndex *root) :
 LinkedObject()
 {
-    assert(root != nullptr);
-    Next = nullptr;
+    assert(root != NULL);
+    Next = NULL;
     enlistTail(root);
 }
 
 void OrderedObject::delist(OrderedIndex *root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
-    OrderedObject *prior = nullptr, *node;
+    OrderedObject *prior = NULL, *node;
 
     node = root->head;
 
@@ -675,17 +675,17 @@
 
 void OrderedObject::enlist(OrderedIndex *root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
-    Next = nullptr;
+    Next = NULL;
     enlistTail(root);
 }
 
 void OrderedObject::enlistTail(OrderedIndex *root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
-    if(root->head == nullptr)
+    if(root->head == NULL)
         root->head = this;
     else if(root->tail)
         root->tail->Next = this;
@@ -695,10 +695,10 @@
 
 void OrderedObject::enlistHead(OrderedIndex *root)
 {
-    assert(root != nullptr);
+    assert(root != NULL);
 
-    Next = nullptr;
-    if(root->tail == nullptr)
+    Next = NULL;
+    if(root->tail == NULL)
         root->tail = this;
     else if(root->head)
         Next = root->head;
@@ -708,43 +708,43 @@
 
 DLinkedObject::DLinkedObject()
 {
-    Root = nullptr;
-    Prev = nullptr;
-    Next = nullptr;
+    Root = NULL;
+    Prev = NULL;
+    Next = NULL;
 }
 
 DLinkedObject::DLinkedObject(const DLinkedObject& from)
 {
-    Root = nullptr;
-    Prev = nullptr;
-    Next = nullptr;
+    Root = NULL;
+    Prev = NULL;
+    Next = NULL;
 }
 
 DLinkedObject::DLinkedObject(OrderedIndex *r)
 {
-    Root = nullptr;
-    Next = Prev = nullptr;
+    Root = NULL;
+    Next = Prev = NULL;
     if(r)
         enlist(r);
 }
 
 void DLinkedObject::enlist(OrderedIndex *r)
 {
-    assert(r != nullptr);
+    assert(r != NULL);
 
     enlistTail(r);
 }
 
 void DLinkedObject::insert(DLinkedObject *o)
 {
-    assert(o != nullptr);
+    assert(o != NULL);
 
     insertTail(o);
 }
 
 void DLinkedObject::insertHead(DLinkedObject *o)
 {
-    assert(o != nullptr);
+    assert(o != NULL);
 
     if(o->Root)
         o->delist();
@@ -755,7 +755,7 @@
     }
     else {
         Root->head = o;
-        o->Prev = nullptr;
+        o->Prev = NULL;
     }
     o->Root = Root;
     o->Next = this;
@@ -764,7 +764,7 @@
 
 void DLinkedObject::insertTail(DLinkedObject *o)
 {
-    assert(o != nullptr);
+    assert(o != NULL);
 
     if(o->Root)
         o->delist();
@@ -775,7 +775,7 @@
     }
     else {
         Root->tail = o;
-        o->Next = nullptr;
+        o->Next = NULL;
     }
     o->Root = Root;
     o->Prev = this;
@@ -784,14 +784,14 @@
 
 void DLinkedObject::enlistHead(OrderedIndex *r)
 {
-    assert(r != nullptr);
+    assert(r != NULL);
 
     if(Root)
         delist();
 
     Root = r;
-    Prev = nullptr; 
-    Next = nullptr;
+    Prev = NULL; 
+    Next = NULL;
 
     if(!Root->tail) {
         Root->tail = Root->head = static_cast<OrderedObject *>(this);
@@ -806,13 +806,13 @@
 
 void DLinkedObject::enlistTail(OrderedIndex *r)
 {
-    assert(r != nullptr);
+    assert(r != NULL);
 
     if(Root)
         delist();
 
     Root = r;
-    Next = Prev = nullptr;
+    Next = Prev = NULL;
 
     if(!Root->head) {
         Root->head = Root->tail = static_cast<OrderedObject *>(this);
@@ -839,8 +839,8 @@
     else if(Root->tail == static_cast<OrderedObject *>(this))
         Root->tail = static_cast<OrderedObject *>(Prev);
 
-    Root = nullptr;
-    Next = Prev = nullptr;
+    Root = NULL;
+    Next = Prev = NULL;
 }
 
 DLinkedObject::~DLinkedObject()
@@ -850,12 +850,12 @@
 
 OrderedIndex::OrderedIndex()
 {
-    head = tail = nullptr;
+    head = tail = NULL;
 }
 
 OrderedIndex::~OrderedIndex()
 {
-    head = tail = nullptr;
+    head = tail = NULL;
 }
 
 void OrderedIndex::copy(const OrderedIndex& source)
@@ -866,14 +866,14 @@
 
 void OrderedIndex::operator*=(OrderedObject *object)
 {
-    assert(object != nullptr);
+    assert(object != NULL);
 
     object->enlist(this);
 }
 
 void OrderedIndex::add(OrderedObject *object)
 {
-    assert(object != nullptr);
+    assert(object != NULL);
 
     object->enlist(this);
 }
@@ -883,12 +883,12 @@
     LinkedObject *node;
 
     if(!head)
-        return nullptr;
+        return NULL;
 
     node = head;
     head = static_cast<OrderedObject *>(node->getNext());
     if(!head)
-        tail = nullptr;
+        tail = NULL;
 
     return static_cast<LinkedObject *>(node);
 }
@@ -897,13 +897,13 @@
 {
     if(head) {
         LinkedObject::purge((LinkedObject *)head);
-        head = tail = nullptr;
+        head = tail = NULL;
     }
 }
 
 void OrderedIndex::reset(void)
 {
-    head = tail = nullptr;
+    head = tail = NULL;
 }
 
 void OrderedIndex::lock_index(void)
@@ -925,7 +925,7 @@
         op[idx++] = node;
         node = node->Next;
     }
-    op[idx] = nullptr;
+    op[idx] = NULL;
     return op;
 }
 
--- corelib/memory.cpp
+++ corelib/memory.cpp
@@ -688,7 +688,7 @@
 {
     const char *out = NULL;
 
-    if(root == nullptr) {
+    if(root == NULL) {
         __THROW_RUNTIME("no root");
         return NULL;
     }
@@ -898,7 +898,7 @@
 }
 
 PagerObject::PagerObject() :
-LinkedObject(nullptr), CountedObject()
+LinkedObject(NULL), CountedObject()
 {
 }
 
--- corelib/shared.cpp
+++ corelib/shared.cpp
@@ -97,7 +97,7 @@
 
 void MappedPointer::release(void *object)
 {
-	if(object != nullptr)
+	if(object != NULL)
 		lock->release();
 }
 
--- corelib/thread.cpp
+++ corelib/thread.cpp
@@ -211,7 +211,7 @@
 
 void *Thread::Local::allocate()
 {
-    return nullptr;
+    return NULL;
 }
 
 void Thread::release(void)
--- corelib/typeref.cpp
+++ corelib/typeref.cpp
@@ -36,7 +36,7 @@
 {
     TypeRelease *rel = autorelease;
     if(rel) {
-        autorelease = nullptr;
+        autorelease = NULL;
         rel->dealloc(this);
         return;
     }
@@ -225,7 +225,7 @@
 {
     value *v1 = polystatic_cast<value *>(ref);
     const char *str1 = "";
-    TypeRelease *ar = nullptr;
+    TypeRelease *ar = NULL;
 
     if(v1) {
         str1 = &v1->mem[0];
@@ -401,7 +401,7 @@
 TypeRef()
 {
     caddr_t p = ar->allocate(sizeof(value) + size);
-    TypeRef::set(new(mem(p)) value(p, size, nullptr, ar));
+    TypeRef::set(new(mem(p)) value(p, size, NULL, ar));
 }
 
 typeref<const uint8_t *>::typeref(bool mode, size_t bits, TypeRelease *ar) :
@@ -412,7 +412,7 @@
         ++size;
 
     caddr_t p = ar->allocate(sizeof(value) + size);
-    TypeRef::set(new(mem(p)) value(p, size, nullptr, ar));
+    TypeRef::set(new(mem(p)) value(p, size, NULL, ar));
     set(mode, 0, bits);
 }
 
@@ -449,7 +449,7 @@
         return 0;
 
     caddr_t p = ar->allocate(sizeof(value) + size);
-    TypeRef::set(new(mem(p)) value(p, size, nullptr, ar));
+    TypeRef::set(new(mem(p)) value(p, size, NULL, ar));
     String::hex2bin(str, data(), size, ws);
     return size;
 }
@@ -462,7 +462,7 @@
         return 0;
 
     caddr_t p = ar->allocate(sizeof(value) + size);
-    TypeRef::set(new(mem(p)) value(p, size, nullptr, ar));
+    TypeRef::set(new(mem(p)) value(p, size, NULL, ar));
     String::b64decode(data(), str, size, ws);
     return size;
 }
@@ -492,7 +492,7 @@
 typeref<const uint8_t *>::value *typeref<const uint8_t *>::create(size_t size, TypeRelease *ar)
 {
     caddr_t p = ar->allocate(sizeof(value) + size);
-    return new(mem(p)) value(p, size, nullptr, ar);
+    return new(mem(p)) value(p, size, NULL, ar);
 }
 
 void typeref<const uint8_t *>::destroy(typeref<const uint8_t *>::value *bytes)
@@ -561,7 +561,7 @@
     uint8_t *out;
     size_t s1 = 0, s2 = 0, max;
     typeref<const uint8_t*> result;
-    TypeRelease *ar = nullptr;
+    TypeRelease *ar = NULL;
 
     if(v1) {
         s1 = v1->max();
@@ -658,7 +658,7 @@
 
 void TypeRelease::release(TypeRef::Counted *obj)
 {
-    obj->autorelease = nullptr;
+    obj->autorelease = NULL;
     obj->dealloc();
 }
 
@@ -680,10 +680,10 @@
     TypeRef::Counted *obj = *root;
     if(obj) {
         *root = obj->linkrelease;
-        obj->autorelease = nullptr;
+        obj->autorelease = NULL;
     }
     else
-        *root = nullptr;
+        *root = NULL;
     return obj;
 }
 
@@ -714,7 +714,7 @@
 
 public:
     TypeReleaseLater() { 
-        list = nullptr; 
+        list = NULL; 
     }
 
     unsigned purge(void) __FINAL;
@@ -734,10 +734,10 @@
     TypeRef::Counted *pool;
     lock.acquire();
     pool = list;
-    list = nullptr;
+    list = NULL;
     lock.release();
 
-    while((obj = delist(&pool)) != nullptr) {
+    while((obj = delist(&pool)) != NULL) {
         TypeRelease::release(obj);
         ++count;
     }
--- inc/ucommon/arrayref.h
+++ inc/ucommon/arrayref.h
@@ -151,7 +151,7 @@
 	}
 
 	inline void release(void) {
-		TypeRef::set(nullptr);
+		TypeRef::set(NULL);
 	}
 
 	inline typeref<T> pull() {
@@ -219,7 +219,7 @@
 	}
 
 	inline void release(void) {
-		TypeRef::set(nullptr);
+		TypeRef::set(NULL);
 	}
 
 	inline typeref<T> pull() {
@@ -325,7 +325,7 @@
 	}
 
 	inline void release(void) {
-		TypeRef::set(nullptr);
+		TypeRef::set(NULL);
 	}
 };
 
--- inc/ucommon/generics.h
+++ inc/ucommon/generics.h
@@ -33,9 +33,11 @@
 #include <cstring>
 #include <stdexcept>
 
+// Do not declare an exception specification. It is an anti-pattern.
+// Also see https://stackoverflow.com/q/1055387.
 #ifndef UCOMMON_SYSRUNTIME
 #define THROW(x)    throw x
-#define THROWS(x)   throw(x)
+#define THROWS(x)
 #define THROWS_ANY  throw()
 #else
 #define THROW(x)    ::abort()
@@ -301,7 +303,7 @@
  */
 template<typename T>
 inline bool isnull(T& object) {
-    return (bool)(object.operator*() == nullptr);
+    return (bool)(object.operator*() == NULL);
 }
 
 /**
@@ -312,7 +314,7 @@
  */
 template<typename T>
 inline bool isnullp(T *object) {
-    return (bool)(object->operator*() == nullptr);
+    return (bool)(object->operator*() == NULL);
 }
 
 /**
--- inc/ucommon/platform.h
+++ inc/ucommon/platform.h
@@ -50,16 +50,16 @@
 #define __THROW_RANGE(x)      throw std::out_of_range(x)
 #define __THROW_RUNTIME(x)    throw std::runtime_error(x)
 #define __THROW_ALLOC()       throw std::bad_alloc()
-#define __THROW_DEREF(v)      if(v == nullptr) \
+#define __THROW_DEREF(v)      if(v == NULL) \
                                 throw std::runtime_error("Dereference NULL")
-#define __THROW_UNDEF(v,x)    if(v == nullptr) throw std::runtime_error(x)
+#define __THROW_UNDEF(v,x)    if(v == NULL) throw std::runtime_error(x)
 #else
 #define __THROW_RANGE(x)      abort()
 #define __THROW_SIZE(x)       abort()
 #define __THROW_RUNTIME(x)    abort()
 #define __THROW_ALLOC()       abort()
-#define __THROW_DEREF(v)      if(v == nullptr) abort()
-#define __THROW_UNDEF(v,x)    if(v == nullptr) abort()
+#define __THROW_DEREF(v)      if(v == NULL) abort()
+#define __THROW_UNDEF(v,x)    if(v == NULL) abort()
 #endif
 
 /**
@@ -173,9 +173,9 @@
 
 #if __cplusplus <= 199711L && !defined(_MSC_VER)
 #if defined(__GNUC_MINOR__) && !defined(__clang__)
-#define nullptr __null
+#define NULL __null
 #elif !defined(__clang__) || (defined(__clang__) && defined(__linux__))
-const class nullptr_t 
+const class NULL_t 
 {
 public:
     template<class T>
@@ -191,7 +191,7 @@
 private:
     void operator&() const;
 
-} nullptr = {};
+} NULL = {};
 #endif
 #endif
 
@@ -392,13 +392,13 @@
     {};
 
 inline void pthread_mutex_lock(pthread_mutex_t *mutex)
-    {pth_mutex_acquire(mutex, 0, nullptr);};
+    {pth_mutex_acquire(mutex, 0, NULL);};
 
 inline void pthread_mutex_unlock(pthread_mutex_t *mutex)
     {pth_mutex_release(mutex);};
 
 inline void pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
-    {pth_cond_await(cond, mutex, nullptr);};
+    {pth_cond_await(cond, mutex, NULL);};
 
 inline void pthread_cond_signal(pthread_cond_t *cond)
     {pth_cond_notify(cond, FALSE);};
@@ -549,7 +549,7 @@
  */
 template<class T>
 inline T *init(T *memory)
-    {return ((memory) ? new(((void *)memory)) T : nullptr);}
+    {return ((memory) ? new(((void *)memory)) T : NULL);}
 
 typedef long Integer;
 typedef unsigned long Unsigned;
@@ -567,8 +567,8 @@
 inline T polypointer_cast(S *s)
 {
 #if defined(DEBUG) && defined(UCOMMON_RTTI)
-    if(s == nullptr)
-        return nullptr;
+    if(s == NULL)
+        return NULL;
     T ptr = dynamic_cast<T>(s);
     __THROW_DEREF(ptr);
     return ptr;
--- inc/ucommon/secure.h
+++ inc/ucommon/secure.h
@@ -971,7 +971,7 @@
 
     /**
      * Get peer (x509) certificate for current stream if present.
-     * @return certificate of peer or nullptr if none.
+     * @return certificate of peer or NULL if none.
      */
     inline secure::cert_t certificate(void) const {
         return cert;
--- inc/ucommon/shared.h
+++ inc/ucommon/shared.h
@@ -236,7 +236,7 @@
 			ip.next();
 		}
 		lock->release();
-		return nullptr;
+		return NULL;
 	}
 
 	void set(const K* key, V* ptr) {
--- inc/ucommon/socket.h
+++ inc/ucommon/socket.h
@@ -603,15 +603,15 @@
          * @return true if we have an address list.
          */
         inline operator bool() const {
-            return list != nullptr;
+            return list != NULL;
         }
 
         inline bool is_valid() const {
-            return list != nullptr;
+            return list != NULL;
         }
 
         inline bool isValid() const {
-            return list != nullptr;
+            return list != NULL;
         }
 
         /**
@@ -619,7 +619,7 @@
          * @return true if we have no address list.
          */
         inline bool operator!() const {
-            return list == nullptr;
+            return list == NULL;
         }
 
         /**
@@ -1959,7 +1959,7 @@
     }
 
     inline linked_pointer() {
-        ptr = nullptr;
+        ptr = NULL;
     }
 
     inline linked_pointer(Socket::address& list) {
@@ -2012,7 +2012,7 @@
      * @return true if we have an address list.
      */
     inline operator bool() const {
-        return ptr != nullptr;
+        return ptr != NULL;
     }
 
     /**
@@ -2063,7 +2063,7 @@
      * @return true if we have no address list.
      */
     inline bool operator!() const {
-        return ptr == nullptr;
+        return ptr == NULL;
     }
 
     inline void next(void) {
--- inc/ucommon/string.h
+++ inc/ucommon/string.h
@@ -1774,11 +1774,11 @@
     }
 
     inline operator bool() const {
-        return data != nullptr;
+        return data != NULL;
     }
 
     inline bool operator!() const {
-        return data == nullptr;
+        return data == NULL;
     }
 
     inline operator char*() const {
--- inc/ucommon/temporary.h
+++ inc/ucommon/temporary.h
@@ -53,9 +53,11 @@
 #include <cstring>
 #include <stdexcept>
 
+// Do not declare an exception specification. It is an anti-pattern.
+// Also see https://stackoverflow.com/q/1055387.
 #ifndef UCOMMON_SYSRUNTIME
 #define THROW(x)    throw x
-#define THROWS(x)   throw(x)
+#define THROWS(x)
 #define THROWS_ANY  throw()
 #else
 #define THROW(x)    ::abort()
--- inc/ucommon/thread.h
+++ inc/ucommon/thread.h
@@ -706,7 +706,7 @@
         void *get(void);
 
         inline void clear() {
-            set(nullptr);
+            set(NULL);
         }
     };
 
--- inc/ucommon/typeref.h
+++ inc/ucommon/typeref.h
@@ -267,7 +267,7 @@
 {
 public:
 	inline TypeRelease() {
-		delegate = nullptr;
+		delegate = NULL;
 	}
 
 	inline TypeRelease(TypeRelease *target) {
@@ -372,7 +372,7 @@
 	inline const T* operator()() const {
 		value *v = polystatic_cast<value*>(ref);
 		if(!v)
-			return nullptr;
+			return NULL;
 
 		return &(v->data);
 	}
@@ -566,7 +566,7 @@
 
 		uint8_t mem[1];
 
-		value(caddr_t addr, size_t size, const uint8_t *data = nullptr, TypeRelease *ar = &auto_release);
+		value(caddr_t addr, size_t size, const uint8_t *data = NULL, TypeRelease *ar = &auto_release);
 
 		void destroy(void);
 
--- test/memory.cpp
+++ test/memory.cpp
@@ -188,7 +188,7 @@
     stringref_t sr = map(3);
     assert(eq(*sr, "hello"));
     sr = map(2);
-    assert(*sr == nullptr);
+    assert(*sr == NULL);
     typeref<int> ki(3);
     sr = "goodbye";
     map(ki, sr);
@@ -213,7 +213,7 @@
     map(9, "9");
     assert(map.used() == 2);
     sr = map(7);
-    assert(*sr == nullptr);
+    assert(*sr == NULL);
 
     listref<int> intlist;
     intlist << 3 << 5 << 7 << 9;
@@ -228,7 +228,7 @@
 
     mapped_pointer<char, maptest> pmap;
     maptest *out = pmap.get("bye");
-    assert(out == nullptr);
+    assert(out == NULL);
     pmap.release(out);
     pmap.set(mt[0].key, &mt[0]);
     pmap.set(mt[1].key, &mt[1]);
@@ -237,7 +237,7 @@
     pmap.release(out);
     pmap.remove("bye");
     out = pmap.get("bye");
-    assert(out == nullptr);
+    assert(out == NULL);
     pmap.release(out);
 
     int a = 1, b = 2;
--- test/thread.cpp
+++ test/thread.cpp
@@ -48,8 +48,8 @@
     testThread() : JoinableThread() {};
 
     void run(void) {
-        assert(local.get() == nullptr);
-        assert(*local != nullptr);
+        assert(local.get() == NULL);
+        assert(*local != NULL);
 
         ++count;
         ::sleep(2);
@@ -62,9 +62,9 @@
     testThread *thr;
     void *mem;
 
-    assert(local.get() == nullptr);
+    assert(local.get() == NULL);
     mem = *local;
-    assert(mem != nullptr);
+    assert(mem != NULL);
     assert(mem == *local);
 
     time(&now);
