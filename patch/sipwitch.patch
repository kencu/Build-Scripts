# Written and placed in public domain by Jeffrey Walton.
# This patch fixes some issues with GNU SIP Witch.
#
# libeXosip2 does not provide eXosip_enable_ipv6()
--- common/voip.cpp
+++ common/voip.cpp
@@ -140,7 +140,9 @@
 
     *msg = NULL;
     eXosip_lock(ctx);
-    eXosip_call_build_prack(ctx, tid, msg);
+    // TODO: verify this change to fix compil error
+    // eXosip_call_build_prack(ctx, tid, msg);
+    eXosip_call_build_prack(ctx, tid, NULL, msg);
     if(!*msg) {
         eXosip_unlock(ctx);
         return false;
@@ -436,7 +436,7 @@
 
     family = f;
 
-#ifdef  AF_INET6
+#if defined(AF_INET6) && 0
     if(family == AF_INET6)
         eXosip_enable_ipv6(1);
 #endif
@@ -868,7 +868,7 @@
 
     family = f;
 
-#ifdef  AF_INET6
+#if defined(AF_INET6) && 0
     if(family == AF_INET6)
         eXosip_enable_ipv6(1);
 #endif
--- utils/sipquery.cpp
+++ utils/sipquery.cpp
@@ -224,7 +224,7 @@
     if(eXosip_init(EXOSIP_CONTEXT))
         shell::errexit(3, "*** sipuser: failed exosip init\n");
 
-#ifdef  AF_INET6
+#if defined(AF_INET6) && 0
     if(family == AF_INET6) {
         eXosip_enable_ipv6(1);
         if(binding == NULL)
--- server/stack.cpp
+++ server/stack.cpp
@@ -16,6 +16,17 @@
 
 #include "server.h"
 
+namespace {
+     // printf family does not add termiating NULL if data fills buffer
+     inline void printf_term(void* buffer, size_t size, int written)
+     {
+          // printf family returns -1 on error
+          char * p = (char *) buffer;
+          size_t w = (size_t) written;
+          written == -1 ? p[0] = '\0' : size >= w ? p[w-1] = '\0' : p[w] = '\0';
+     }
+}
+
 namespace sipwitch {
 
 static volatile unsigned allocated_segments = 0;
@@ -505,6 +516,7 @@
     voip::body_t body = NULL;
     session *target = NULL;
     call *cr = source->parent;
+     int rc;
 
     if(cr->source == source)
         target = cr->target;
@@ -522,10 +534,14 @@
     osip_message_get_body(sevent->request, 0, &body);
     if(!voip::make_dialog_info(target->context, did, &msg))
         return;
-    if(ct->subtype)
-        snprintf(type, sizeof(type), "%s/%s", ct->type, ct->subtype);
-    else
-        snprintf(type, sizeof(type), "%s", ct->type);
+    if(ct->subtype) {
+        rc = snprintf(type, sizeof(type), "%s/%s", ct->type, ct->subtype);
+          printf_term(type, sizeof(type), rc);
+     }
+    else {
+        rc = snprintf(type, sizeof(type), "%s", ct->type);
+          printf_term(type, sizeof(type), rc);
+     }
     voip::attach(msg, type, body->body);
     voip::server_allows(msg);
     voip::send_dialog_message(target->context, did, msg);
@@ -1043,6 +1059,7 @@
     assert(user == NULL || *user != 0);
     assert(size > 0);
 
+     int rc;
     char pbuf[10];
     bool ipv6 = false;
 
@@ -1068,10 +1085,14 @@
         String::add(buf, size, "[");
 
     String::add(buf, size, sip.published);
-    if(ipv6)
-        snprintf(pbuf, sizeof(pbuf), "]:%u", sip_port);
-    else
-        snprintf(pbuf, sizeof(pbuf), ":%u", sip_port);
+    if(ipv6) {
+        rc = snprintf(pbuf, sizeof(pbuf), "]:%u", sip_port);
+          printf_term(pbuf, sizeof(pbuf), rc);
+     }
+    else {
+        rc = snprintf(pbuf, sizeof(pbuf), ":%u", sip_port);
+          printf_term(pbuf, sizeof(pbuf), rc);
+     }
     String::add(buf, size, pbuf);
     return buf;
 }
@@ -1085,6 +1106,7 @@
 
     char pbuf[10];
     unsigned port = 0;
+     int rc;
     bool ipv6 = false;
     const char *defaddr = NULL;
 
@@ -1135,10 +1157,14 @@
 
     len = strlen(buf);
     Socket::query((struct sockaddr *)addr, buf + len, size - len);
-    if(ipv6)
-        snprintf(pbuf, sizeof(pbuf), "]:%u", port);
-    else
-        snprintf(pbuf, sizeof(pbuf), ":%u", port);
+    if(ipv6) {
+        rc = snprintf(pbuf, sizeof(pbuf), "]:%u", port);
+          printf_term(pbuf, sizeof(pbuf), rc);
+     }
+    else {
+        rc = snprintf(pbuf, sizeof(pbuf), ":%u", port);
+          printf_term(pbuf, sizeof(pbuf), rc);
+     }
     String::add(buf, size, pbuf);
     return buf;
 }
@@ -1217,6 +1243,7 @@
 {
     char route[MAX_URI_SIZE];
     char touri[MAX_URI_SIZE];
+     int rc;
 
     if(!call->diverting)
         return;
@@ -1224,23 +1251,28 @@
     uri::publish(call->request, route, call->divert, sizeof(route));
 
     if(String::equal(call->diverting, "all")) {
-        snprintf(touri, sizeof(touri), "<%s>;reason=unconditional", route);
+        rc = snprintf(touri, sizeof(touri), "<%s>;reason=unconditional", route);
+          printf_term(touri, sizeof(touri), rc);
         voip::header(invite, "Diversion", touri);
     }
     else if(String::equal(call->diverting, "na")) {
-        snprintf(touri, sizeof(touri), "<%s>;reason=no-answer", route);
+        rc = snprintf(touri, sizeof(touri), "<%s>;reason=no-answer", route);
+          printf_term(touri, sizeof(touri), rc);
         voip::header(invite, "Diversion", touri);
     }
     else if(String::equal(call->diverting, "busy")) {
-        snprintf(touri, sizeof(touri), "<%s>;reason=user-busy", route);
+        rc = snprintf(touri, sizeof(touri), "<%s>;reason=user-busy", route);
+          printf_term(touri, sizeof(touri), rc);
         voip::header(invite, "Diversion", touri);
     }
     else if(String::equal(call->diverting, "dnd")) {
-        snprintf(touri, sizeof(touri), "<%s>;reason=do-not-disturb", route);
+        rc = snprintf(touri, sizeof(touri), "<%s>;reason=do-not-disturb", route);
+          printf_term(touri, sizeof(touri), rc);
         voip::header(invite, "Diversion", touri);
     }
     else if(String::equal(call->diverting, "away")) {
-        snprintf(touri, sizeof(touri), "<%s>;reason=away", route);
+        rc = snprintf(touri, sizeof(touri), "<%s>;reason=away", route);
+          printf_term(touri, sizeof(touri), rc);
         voip::header(invite, "Diversion", touri);
     }
 }
@@ -1260,7 +1292,7 @@
     voip::msg_t invite = NULL;
     char expheader[32];
     char seqid[64];
-    int cid;
+    int cid, rc;
     unsigned icount = 0;
     time_t now;
     srv resolv;
@@ -1290,7 +1322,8 @@
     }
 
     if(schema) {
-        snprintf(rewrite, sizeof(rewrite), "%s:%s", schema, uri_target);
+        rc = snprintf(rewrite, sizeof(rewrite), "%s:%s", schema, uri_target);
+          printf_term(rewrite, sizeof(rewrite), rc);
         uri_target = rewrite;
     }
 
@@ -1316,7 +1349,8 @@
         sp.next();
     }
 
-    snprintf(touri, sizeof(touri), "<%s>", uri_target);
+    rc = snprintf(touri, sizeof(touri), "<%s>", uri_target);
+     printf_term(touri, sizeof(touri), rc);
 
     invite = NULL;
 
@@ -1337,7 +1371,8 @@
         char nounce[64];
         char *req = NULL;
         osip_uri_to_str(invite->req_uri, &req);
-        snprintf(authbuf, 1024, "%s:%s", invite->sip_method, req);
+        rc = snprintf(authbuf, 1024, "%s:%s", invite->sip_method, req);
+          printf_term(authbuf, 1024, rc);
         Random::uuid(nounce);
 
         digest_t auth("md5");
@@ -1346,11 +1381,12 @@
         auth = registry::getDigest();
         auth.puts(authbuf);
         response = *auth;
-        snprintf(authbuf, 1024, "%s:%s:%s", digest, *once, *response);
+        rc = snprintf(authbuf, 1024, "%s:%s:%s", digest, *once, *response);
+          printf_term(authbuf, 1024, rc);
         auth.reset();
         auth.puts(authbuf);
         response = *auth;
-        snprintf(authbuf, 1024,
+        rc = snprintf(authbuf, 1024,
             "Digest username=\"%s\""
             ",realm=\"%s\""
             ",uri=\"%s\""
@@ -1358,6 +1394,7 @@
             ",nonce=\"%s\""
             ",algorithm=%s"
             ,s->reg->userid, registry::getRealm(), req, *response, *once, registry::getDigest());
+          printf_term(authbuf, 1024, rc);
         voip::header(invite, AUTHORIZATION, authbuf);
         delete[] authbuf;
         osip_free(req);
@@ -1366,7 +1403,8 @@
         voip::header(invite, P_SIPWITCH_NODE, "no");
 
     if(call->expires) {
-        snprintf(expheader, sizeof(expheader), "%ld", (long)(call->expires - now));
+        rc = snprintf(expheader, sizeof(expheader), "%ld", (long)(call->expires - now));
+          printf_term(expheader, sizeof(expheader), rc);
         voip::header(invite, SESSION_EXPIRES, expheader);
     }
 
@@ -1383,7 +1421,8 @@
     stack::siplog(invite);
     cid = voip::send_invite_request(context, invite);
     if(cid > 0) {
-        snprintf(seqid, sizeof(seqid), "%08x-%d", s->sequence, s->cid);
+        rc = snprintf(seqid, sizeof(seqid), "%08x-%d", s->sequence, s->cid);
+          printf_term(seqid, sizeof(seqid), rc);
         uri::publish(call->request, route, seqid, sizeof(route));
         voip::call_reference(context, cid, route);
         ++icount;
@@ -1398,7 +1437,8 @@
     registry::incUse(NULL, stats::OUTGOING);
     String::set(invited->identity, sizeof(invited->identity), uri_target);
     String::set(invited->display, sizeof(invited->display), username);
-    snprintf(invited->from, sizeof(invited->from), "<%s>", uri_target);
+    rc = snprintf(invited->from, sizeof(invited->from), "<%s>", uri_target);
+     printf_term(invited->from, sizeof(invited->from), rc);
     String::set(invited->network, sizeof(invited->network), network);
     invited->nat = nat;
     uri::identity(*resolv, invited->sysident, username, sizeof(invited->sysident));
@@ -1419,6 +1459,7 @@
     const char *target;
     char buffer[MAX_URI_SIZE];
     registry::mapped *rr = NULL;
+     int rc;
 
     String::set(cr->divert, sizeof(cr->divert), cr->forward);
     cr->forwarding = NULL;
@@ -1468,8 +1509,10 @@
     goto test;
 
 remote:
-    if(!String::equal(target, "sip:", 4) && !String::equal(target, "sips:", 5))
-        snprintf(buffer, sizeof(buffer), "%s:%s", getScheme(), target);
+    if(!String::equal(target, "sip:", 4) && !String::equal(target, "sips:", 5)) {
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s", getScheme(), target);
+          printf_term(buffer, sizeof(buffer), rc);
+     }
     else
         String::set(buffer, sizeof(buffer), target);
     target = buffer;
@@ -1507,7 +1550,7 @@
     char seqid[64];
     char route[MAX_URI_SIZE];
     char touri[MAX_URI_SIZE];
-    int cid;
+    int cid, rc;
     unsigned icount = 0;
 
     time(&now);
@@ -1540,12 +1583,17 @@
 
         if(dest == ROUTED) {
             stack::sipPublish(&tp->address, route, call->dialed, sizeof(route));
-            snprintf(touri, sizeof(touri), "\"%s\" <%s;user=phone>", call->dialed, route);
+            rc = snprintf(touri, sizeof(touri), "\"%s\" <%s;user=phone>", call->dialed, route);
+               printf_term(touri, sizeof(touri), rc);
         }
-        else if(call->phone)
-            snprintf(touri, sizeof(touri), "<%s;user=phone>", tp->contact);
-        else
-            snprintf(touri, sizeof(touri), "<%s>", tp->contact);
+        else if(call->phone) {
+            rc = snprintf(touri, sizeof(touri), "<%s;user=phone>", tp->contact);
+               printf_term(touri, sizeof(touri), rc);
+          }
+        else {
+            rc = snprintf(touri, sizeof(touri), "<%s>", tp->contact);
+               printf_term(touri, sizeof(touri), rc);
+          }
 
         stack::sipPublish(&tp->address, route + 1, NULL, sizeof(route) - 5);
         route[0] = '<';
@@ -1562,7 +1610,8 @@
             stack::sipPublish(&tp->address, route, call->dialed, sizeof(route));
             if(call->phone)
                 String::add(route, sizeof(route), ";user=phone");
-            snprintf(touri, sizeof(touri), "\"%s\" <%s>", call->dialed, route);
+            rc = snprintf(touri, sizeof(touri), "\"%s\" <%s>", call->dialed, route);
+               printf_term(touri, sizeof(touri), rc);
             if(invite->to) {
                 osip_to_free(invite->to);
                 invite->to = NULL;
@@ -1576,7 +1625,8 @@
         voip::server_supports(invite, "100rel,replaces,timer");
 
         if(call->expires) {
-            snprintf(expheader, sizeof(expheader), "%ld", (long)(call->expires - now));
+            rc = snprintf(expheader, sizeof(expheader), "%ld", (long)(call->expires - now));
+               printf_term(expheader, sizeof(expheader), rc);
             voip::header(invite, SESSION_EXPIRES, expheader);
         }
 
@@ -1592,7 +1642,8 @@
         stack::siplog(invite);
         cid = voip::send_invite_request(tp->context, invite);
         if(cid > 0) {
-            snprintf(seqid, sizeof(seqid), "%08x-%d", s->sequence, s->cid);
+            rc = snprintf(seqid, sizeof(seqid), "%08x-%d", s->sequence, s->cid);
+               printf_term(seqid, sizeof(seqid), rc);
             stack::sipAddress((struct sockaddr_internet *)&tp->peering, route, seqid, sizeof(route));
             voip::call_reference(tp->context, cid, route);
             ++icount;
@@ -1610,8 +1661,10 @@
         invited->peering = tp->peering;
         invited->nat = nat;
 
-        if(rr->ext)
-            snprintf(invited->sysident, sizeof(invited->sysident), "%u", rr->ext);
+        if(rr->ext) {
+            rc = snprintf(invited->sysident, sizeof(invited->sysident), "%u", rr->ext);
+               printf_term(invited->sysident, sizeof(invited->sysident), rc);
+          }
         else
             String::set(invited->sysident, sizeof(invited->sysident), rr->userid);
         if(rr->display[0])
@@ -1619,15 +1672,21 @@
         else
             String::set(invited->display, sizeof(invited->display), invited->sysident);
         stack::sipPublish((struct sockaddr_internet *)&tp->peering, invited->identity, invited->sysident, sizeof(invited->identity));
-        if(rr->ext && !rr->display[0])
-            snprintf(invited->from, sizeof(invited->from),
+        if(rr->ext && !rr->display[0]) {
+            rc = snprintf(invited->from, sizeof(invited->from),
                 "\"%s\" <%s;user=phone>", invited->sysident, invited->identity);
-        else if(rr->display[0])
-            snprintf(invited->from, sizeof(invited->from),
+               printf_term(invited->from, sizeof(invited->from), rc);
+          }
+        else if(rr->display[0]) {
+            rc = snprintf(invited->from, sizeof(invited->from),
                 "\"%s\" <%s>", rr->display, invited->identity);
-        else
-            snprintf(invited->from, sizeof(invited->from),
+               printf_term(invited->from, sizeof(invited->from), rc);
+          }
+        else {
+            rc = snprintf(invited->from, sizeof(invited->from),
                 "<%s>", invited->identity);
+               printf_term(invited->from, sizeof(invited->from), rc);
+          }
         registry::incUse(rr, stats::OUTGOING);
         invited->reg = rr;
 
--- server/thread.cpp
+++ server/thread.cpp
@@ -16,6 +16,17 @@
 
 #include "server.h"
 
+namespace {
+     // printf family does not add termiating NULL if data fills buffer
+     inline void printf_term(void* buffer, size_t size, int written)
+     {
+          // printf family returns -1 on error
+          char * p = (char *) buffer;
+          size_t w = (size_t) written;
+          written == -1 ? p[0] = '\0' : size >= w ? p[w-1] = '\0' : p[w] = '\0';
+     }
+}
+
 namespace sipwitch {
 
 static volatile bool warning_registry = false;
@@ -138,7 +149,7 @@
 
 void thread::publish(void)
 {
-    int error = SIP_BAD_REQUEST;
+    int error = SIP_BAD_REQUEST, rc;
     voip::body_t mbody = NULL;
     voip::ctype_t ct;
     const char *tmp = NULL;
@@ -175,8 +186,10 @@
     if(msgheader && msgheader->hvalue)
         event = msgheader->hvalue;
 
-    if(ct && ct->subtype)
-        snprintf(msgtype, sizeof(msgtype), "%s/%s", ct->type, ct->subtype);
+    if(ct && ct->subtype) {
+        rc = snprintf(msgtype, sizeof(msgtype), "%s/%s", ct->type, ct->subtype);
+          printf_term(msgtype, sizeof(msgtype), rc);
+     }
     else if(ct && ct->type)
         String::set(msgtype, sizeof(msgtype), ct->type);
     else
@@ -259,6 +272,7 @@
 {
     voip::ctype_t ct;
     voip::body_t body = NULL;
+     int rc;
     char address[MAX_URI_SIZE];
     char fromhdr[MAX_URI_SIZE];
     char target[MAX_URI_SIZE];
@@ -311,28 +325,40 @@
         return;
     }
 
-    if(ct->subtype)
-        snprintf(msgtype, sizeof(msgtype), "%s/%s",
+    if(ct->subtype) {
+        rc = snprintf(msgtype, sizeof(msgtype), "%s/%s",
             ct->type, ct->subtype);
-    else
-        snprintf(msgtype, sizeof(msgtype), "%s",
+          printf_term(msgtype, sizeof(msgtype), rc);
+     }
+    else {
+        rc = snprintf(msgtype, sizeof(msgtype), "%s",
             ct->type);
+          printf_term(msgtype, sizeof(msgtype), rc);
+     }
 
-    if(extension && !digest)
-        snprintf(sysid, sizeof(sysid), "%u", extension);
+    if(extension && !digest) {
+        rc = snprintf(sysid, sizeof(sysid), "%u", extension);
+          printf_term(sysid, sizeof(sysid), rc);
+     }
     else
         String::set(sysid, sizeof(sysid), identity);
 
     uri::publish(requesting, address, sysid, sizeof(address));
-    if(extension && !display[0])
-        snprintf(fromhdr, sizeof(fromhdr),
+    if(extension && !display[0]) {
+        rc = snprintf(fromhdr, sizeof(fromhdr),
             "\"%u\" <%s;user=phone>", extension, address);
-    else if(display[0])
-        snprintf(fromhdr, sizeof(fromhdr),
+          printf_term(fromhdr, sizeof(fromhdr), rc);
+     }
+    else if(display[0]) {
+        rc = snprintf(fromhdr, sizeof(fromhdr),
             "\"%s\" <%s>", display, address);
-    else
-        snprintf(fromhdr, sizeof(fromhdr),
+          printf_term(fromhdr, sizeof(fromhdr), rc);
+     }
+    else {
+        rc = snprintf(fromhdr, sizeof(fromhdr),
             "<%s>", address);
+          printf_term(fromhdr, sizeof(fromhdr), rc);
+     }
 
     shell::debug(3, "sending message from %s to %s\n", sysid, target);
     osip_content_length_to_str(sevent->request->content_length, &msglen);
@@ -351,10 +377,11 @@
     const char *target = dialing;
     voip::body_t body = NULL;
     stack::call *call = session->parent;
+    cdr *cdrnode = NULL;
     unsigned toext = 0;
+     int rc;
     voip::hdr_t msgheader = NULL;
-    char fromext[32];
-    cdr *cdrnode = NULL;
+    char fromext[64];
     const char *domain = registry::getDomain();
 
     uri::serviceid(requesting, call->request, sizeof(call->request));
@@ -382,8 +409,10 @@
         call->failed(this, session);
     }
 
-    if(extension)
-        snprintf(fromext, sizeof(fromext), "%u", extension);
+    if(extension) {
+        rc = snprintf(fromext, sizeof(fromext), "%u", extension);
+          printf_term(fromext, sizeof(fromext), rc);
+     }
 
     msgheader = NULL;
     osip_message_header_get_byname(sevent->request, SESSION_EXPIRES, 0, &msgheader);
@@ -433,8 +462,10 @@
     call->type = destination;
     switch(destination) {
     case LOCAL:
-        if(extension)
-            snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+        if(extension) {
+            rc = snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+               printf_term(session->sysident, sizeof(session->sysident), rc);
+          }
         else
             String::set(session->sysident, sizeof(session->sysident), identity);
         if(display[0])
@@ -446,12 +477,14 @@
         String::set(cdrnode->ident, sizeof(cdrnode->ident), session->sysident);
         String::set(cdrnode->dialed, sizeof(cdrnode->dialed), call->dialed);
         String::set(cdrnode->display, sizeof(cdrnode->display), session->display);
-        snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
+        rc = snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
             stack::sip.getScheme(), session->sysident, domain);
+          printf_term(session->identity, sizeof(session->identity), rc);
 
         if(toext) {
             call->phone = true;
-            snprintf(call->dialed, sizeof(call->dialed), "%u", toext);
+            rc = snprintf(call->dialed, sizeof(call->dialed), "%u", toext);
+               printf_term(call->dialed, sizeof(call->dialed), rc);
         }
         else
             String::set(call->dialed, sizeof(call->dialed), target);
@@ -466,15 +499,21 @@
             return;
         }
 
-        if(extension && !display[0])
-            snprintf(session->from, sizeof(session->from),
+        if(extension && !display[0]) {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s;user=phone>", session->sysident, session->identity);
-        else if(display[0])
-            snprintf(session->from, sizeof(session->from),
+               printf_term(session->from, sizeof(session->from), rc);
+          }
+        else if(display[0]) {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s>", session->display, session->identity);
-        else
-            snprintf(session->from, sizeof(session->from),
+               printf_term(session->from, sizeof(session->from), rc);
+          }
+        else {
+            rc = snprintf(session->from, sizeof(session->from),
                 "<%s>", session->identity);
+               printf_term(session->from, sizeof(session->from), rc);
+          }
 
         session->closed = false;
         session->reg = registry::invite(identity, stats::INCOMING);
@@ -483,18 +522,22 @@
         break;
     case PUBLIC:
         String::set(call->dialed, sizeof(call->dialed), target);
-        snprintf(session->identity, sizeof(session->identity), "%s:%s@%s:%s",
+        rc = snprintf(session->identity, sizeof(session->identity), "%s:%s@%s:%s",
             from->url->scheme, from->url->username, from->url->host, from->url->port);
-        snprintf(session->sysident, sizeof(session->sysident), "%s@%s", from->url->username, from->url->host);
+          printf_term(session->identity, sizeof(session->identity), rc);
+        rc = snprintf(session->sysident, sizeof(session->sysident), "%s@%s", from->url->username, from->url->host);
+          printf_term(session->sysident, sizeof(session->sysident), rc);
         if(from->displayname) {
             String::set(session->display, sizeof(session->display), from->displayname);
-            snprintf(session->from, sizeof(session->from),
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s>", from->displayname, session->identity);
+               printf_term(session->from, sizeof(session->from), rc);
         }
         else {
             String::set(session->display, sizeof(session->display), from->url->username);
-            snprintf(session->from, sizeof(session->from),
+            rc = snprintf(session->from, sizeof(session->from),
                 "<%s>", session->identity);
+               printf_term(session->from, sizeof(session->from), rc);
         }
         shell::debug(1, "incoming call %08x:%u for %s from %s\n",
             session->sequence, session->cid, call->dialed, session->sysident);
@@ -507,8 +550,10 @@
         break;
     case REDIRECTED:
     case EXTERNAL:
-        if(extension)
-            snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+        if(extension) {
+            rc = snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+               printf_term(session->sysident, sizeof(session->sysident), rc);
+          }
         else
             String::set(session->sysident, sizeof(session->sysident), identity);
         session->reg = registry::invite(identity, stats::INCOMING);
@@ -517,13 +562,16 @@
         else
             String::set(session->display, sizeof(session->display), identity);
 
-        if(registry::getDomain() || destination != EXTERNAL)
-            snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
+        if(registry::getDomain() || destination != EXTERNAL) {
+            rc = snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
                 stack::sip.getScheme(), session->sysident, domain);
+               printf_term(session->identity, sizeof(session->identity), rc);
+          }
         else {
             gethostname(buftemp, sizeof(buftemp));
-            snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
+            rc = snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
                 stack::sip.getScheme(), session->sysident, buftemp);
+               printf_term(session->identity, sizeof(session->identity), rc);
         }
 
         if(destination == EXTERNAL)
@@ -531,15 +579,21 @@
         else
             String::set(call->dialed, sizeof(call->dialed), dialing);
 
-        if(extension && !display[0])
-            snprintf(session->from, sizeof(session->from),
+        if(extension && !display[0]) {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s;user=phone>", session->sysident, session->identity);
-        else if(display[0])
-            snprintf(session->from, sizeof(session->from),
+               printf_term(session->from, sizeof(session->from), rc);
+          }
+        else if(display[0]) {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s>", display, session->identity);
-        else
-            snprintf(session->from, sizeof(session->from),
+               printf_term(session->from, sizeof(session->from), rc);
+          }
+        else {
+            rc = snprintf(session->from, sizeof(session->from),
                 "<%s>", session->identity);
+               printf_term(session->from, sizeof(session->from), rc);
+          }
 
         shell::debug(1, "outgoing call %08x:%u from %s to %s",
             session->sequence, session->cid, getIdent(), requesting);
@@ -557,8 +611,10 @@
     case ROUTED:
         call->phone = true;
 
-        if(extension)
-            snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+        if(extension) {
+            rc = snprintf(session->sysident, sizeof(session->sysident), "%u", extension);
+               printf_term(session->sysident, sizeof(session->sysident), rc);
+          }
         else
             String::set(session->sysident, sizeof(session->sysident), identity);
         if(display[0])
@@ -566,15 +622,20 @@
         else
             String::set(session->display, sizeof(session->display), session->sysident);
 
-        snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
+        rc = snprintf(session->identity, sizeof(session->identity), "%s:%s@%s",
             stack::sip.getScheme(), session->sysident, domain);
+          printf_term(session->identity, sizeof(session->identity), rc);
 
-        if(extension)
-            snprintf(session->from, sizeof(session->from),
+        if(extension) {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s;user=phone>", session->display, session->identity);
-        else
-            snprintf(session->from, sizeof(session->from),
+               printf_term(session->from, sizeof(session->from), rc);
+          }
+        else {
+            rc = snprintf(session->from, sizeof(session->from),
                 "\"%s\" <%s>", session->display, session->identity);
+               printf_term(session->from, sizeof(session->from), rc);
+          }
 
         String::set(call->dialed, sizeof(call->dialed), dialing);
 
@@ -654,14 +715,18 @@
 
 const char *thread::getIdent(void)
 {
+     int rc;
+
     if(!extension)
         return identity;
 
     if(registry::isExtension(identity) && (unsigned)atoi(identity) == extension)
         return identity;
 
-    if(!identbuf[0])
-        snprintf(identbuf, sizeof(identbuf), "%s(%u)", identity, extension);
+    if(!identbuf[0]) {
+        rc = snprintf(identbuf, sizeof(identbuf), "%s(%u)", identity, extension);
+          printf_term(session->from, sizeof(session->from), rc);
+     }
 
     return identbuf;
 }
@@ -699,7 +764,7 @@
 
 bool thread::authorize(void)
 {
-    int error = SIP_UNDECIPHERABLE;
+    int error = SIP_UNDECIPHERABLE, rc;
     const char *scheme = "sip";
     const char *cp;
     time_t now;
@@ -760,20 +825,28 @@
     }
 
     if(uri->username && uri->username[0]) {
-        if(uri->port && uri->port[0])
-            snprintf(requesting, sizeof(requesting), "%s:%s@%s%s%s:%s",
+        if(uri->port && uri->port[0]) {
+            rc = snprintf(requesting, sizeof(requesting), "%s:%s@%s%s%s:%s",
                 uri->scheme, uri->username, sep1, uri_host, sep2, uri->port);
-        else
-            snprintf(requesting, sizeof(requesting), "%s:%s@%s%s%s",
+               printf_term(requesting, sizeof(requesting), rc);
+          }
+        else {
+            rc = snprintf(requesting, sizeof(requesting), "%s:%s@%s%s%s",
                 uri->scheme, uri->username, sep1, uri_host, sep2);
+               printf_term(requesting, sizeof(requesting), rc);
+          }
     }
     else {
-        if(uri->port && uri->port[0])
-            snprintf(requesting, sizeof(requesting), "%s:%s%s%s:%s",
+        if(uri->port && uri->port[0]) {
+            rc = snprintf(requesting, sizeof(requesting), "%s:%s%s%s:%s",
                 uri->scheme, sep1, uri_host, sep2, uri->port);
-        else
-            snprintf(requesting, sizeof(requesting), "%s:%s%s%s",
+               printf_term(requesting, sizeof(requesting), rc);
+          }
+        else {
+            rc = snprintf(requesting, sizeof(requesting), "%s:%s%s%s",
                 uri->scheme, sep1, uri_host, sep2);
+               printf_term(requesting, sizeof(requesting), rc);
+          }
     }
 
     if(uri->port && uri->port[0])
@@ -1058,19 +1131,27 @@
         if(!cp)
             cp = service::getValue(routed, "target");
         if(cp && !strchr(cp, '@')) {
-            if(String::equal(cp, "sip:", 4) || String::equal(cp, "sips:", 5))
-                snprintf(buffer, sizeof(buffer), "%s@%s", target, cp);
-            else
-                snprintf(buffer, sizeof(buffer), "sip:%s@%s", target, cp);
+            if(String::equal(cp, "sip:", 4) || String::equal(cp, "sips:", 5)) {
+                rc = snprintf(buffer, sizeof(buffer), "%s@%s", target, cp);
+                    printf_term(buffer, sizeof(buffer), rc);
+               }
+            else {
+                rc = snprintf(buffer, sizeof(buffer), "sip:%s@%s", target, cp);
+                    printf_term(buffer, sizeof(buffer), rc);
+               }
             refer = buffer;
             goto redirect;
         }
         if(!cp)
             goto invalid;
-        if(String::equal(cp, "sip:", 4) || String::equal(cp, "sips:"))
-            snprintf(buffer, sizeof(buffer), "%s", cp);
-        else
-            snprintf(buffer, sizeof(buffer), "sip:%s", cp);
+        if(String::equal(cp, "sip:", 4) || String::equal(cp, "sips:")) {
+            rc = snprintf(buffer, sizeof(buffer), "%s", cp);
+               printf_term(buffer, sizeof(buffer), rc);
+          }
+        else {
+            rc = snprintf(buffer, sizeof(buffer), "sip:%s", cp);
+               printf_term(buffer, sizeof(buffer), rc);
+          }
         refer = buffer;
         goto redirect;
     }
@@ -1102,10 +1183,14 @@
     }
     if(!stricmp(routed->getId(), "rewrite")) {
         if(strchr(dialing, '@')) {
-            if(String::equal(dialing, "sips:", 5) || String::equal("sip:", dialing, 4))
-                snprintf(dbuf, sizeof(dbuf), "%s", dialing);
-            else
-                snprintf(dbuf, sizeof(dbuf), "sip:%s", dialing);
+            if(String::equal(dialing, "sips:", 5) || String::equal("sip:", dialing, 4)) {
+                rc = snprintf(dbuf, sizeof(dbuf), "%s", dialing);
+                    printf_term(dbuf, sizeof(dbuf), rc);
+               }
+            else {
+                rc = snprintf(dbuf, sizeof(dbuf), "sip:%s", dialing);
+                    printf_term(dbuf, sizeof(dbuf), rc);
+               }
             refer = dbuf;
             goto redirect;
         }
@@ -1266,6 +1351,7 @@
     service::keynode *node = NULL, *leaf;
     stringbuf<64> digest;
     int error = SIP_PROXY_AUTHENTICATION_REQUIRED;
+     int rc;
     const char *cp;
     const char *hash = NULL;
     digest_t calc(registry::getDigest());
@@ -1340,16 +1426,21 @@
     }
 
     // compute service request digest string
-    snprintf(buffer, sizeof(buffer), "%s:%s", sevent->request->sip_method, auth->uri);
+    rc = snprintf(buffer, sizeof(buffer), "%s:%s", sevent->request->sip_method, auth->uri);
+     printf_term(buffer, sizeof(buffer), rc);
 
     calc.puts(buffer);
     digest = *calc;
 
     // apply user digest pointer with nonce, and service digest string
-    if(hash)
-        snprintf(buffer, sizeof(buffer), "%s:%s:%s", hash, auth->nonce, *digest);
-    else
-        snprintf(buffer, sizeof(buffer), "%s:%s:%s", leaf->getPointer(), auth->nonce, *digest);
+    if(hash) {
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s:%s", hash, auth->nonce, *digest);
+          printf_term(buffer, sizeof(buffer), rc);
+     }
+    else {
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s:%s", leaf->getPointer(), auth->nonce, *digest);
+          printf_term(buffer, sizeof(buffer), rc);
+     }
     digests::release(hash);
 
     calc.reset();
@@ -1374,14 +1465,17 @@
 void thread::challenge(void)
 {
     voip::msg_t reply = NULL;
+     int rc;
     char nonce[32];
     time_t now;
 
     time(&now);
-    snprintf(nonce, sizeof(nonce), "%08lx", (long)now);
-    snprintf(buffer, sizeof(buffer),
+    rc = snprintf(nonce, sizeof(nonce), "%08lx", (long)now);
+     printf_term(nonce, sizeof(nonce), rc);
+    rc = snprintf(buffer, sizeof(buffer),
         "Digest realm=\"%s\", nonce=\"%s\", algorithm=%s",
                 registry::getRealm(), nonce, registry::getDigest());
+     printf_term(buffer, sizeof(buffer), rc);
 
     switch(authorizing) {
     case REGISTRAR:
@@ -1462,6 +1556,7 @@
     service::keynode *node = NULL, *leaf;
     stringbuf<64> digest;
     int error = SIP_PROXY_AUTHENTICATION_REQUIRED;
+     int rc;
     const char *cp;
     char temp[64];
     voip::msg_t reply = NULL;
@@ -1507,15 +1602,21 @@
     }
 
     // compute a method/uri hash
-    snprintf(buffer, sizeof(buffer), "%s:%s", sevent->request->sip_method, auth->uri);
+    rc = snprintf(buffer, sizeof(buffer), "%s:%s", sevent->request->sip_method, auth->uri);
+     printf_term(buffer, sizeof(buffer), rc);
+
     calc.puts(buffer);
     digest = *calc;
 
     // compute with user digest
-    if(hash)
-        snprintf(buffer, sizeof(buffer), "%s:%s:%s", hash, auth->nonce, *digest);
-    else
-        snprintf(buffer, sizeof(buffer), "%s:%s:%s", leaf->getPointer(), auth->nonce, *digest);
+    if(hash) {
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s:%s", hash, auth->nonce, *digest);
+          printf_term(buffer, sizeof(buffer), rc);
+     }
+    else {
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s:%s", leaf->getPointer(), auth->nonce, *digest);
+          printf_term(buffer, sizeof(buffer), rc);
+     }
 
     digests::release(hash);
 
@@ -1535,9 +1636,11 @@
     server::release(user);
     if(voip::make_response_message(context, sevent->tid, error, &reply)) {
         if(error == SIP_OK) {
-            snprintf(temp, sizeof(temp), ";expires=%lu", (long)registry::getExpires());
+            rc = snprintf(temp, sizeof(temp), ";expires=%lu", (long)registry::getExpires());
+               printf_term(temp, sizeof(temp), rc);
             osip_message_set_contact(reply, temp);
-            snprintf(temp, sizeof(temp), "%lu", (long)registry::getExpires());
+            rc = snprintf(temp, sizeof(temp), "%lu", (long)registry::getExpires());
+               printf_term(temp, sizeof(temp), rc);
             osip_message_set_expires(reply, temp);
         }
         voip::server_allows(reply);
@@ -1557,6 +1660,7 @@
     int interval = -1;
     int pos = 0;
     int error = SIP_ADDRESS_INCOMPLETE;
+     int rc;
     voip::msg_t reply = NULL;
     struct sockaddr_internet iface;
 
@@ -1572,9 +1676,11 @@
 
     if(registry::getDomain())
         String::set(binding, sizeof(binding), registry::getDomain());
-    else if(sevent->request->req_uri->port && !eq(sevent->request->req_uri->port, "5060"))
-        snprintf(binding, sizeof(binding), "%s:%s",
+    else if(sevent->request->req_uri->port && !eq(sevent->request->req_uri->port, "5060")) {
+        rc = snprintf(binding, sizeof(binding), "%s:%s",
             sevent->request->req_uri->host, sevent->request->req_uri->port);
+          printf_term(binding, sizeof(binding), rc);
+     }
     else
         String::set(binding, sizeof(binding), sevent->request->req_uri->host);
 
@@ -1591,8 +1697,9 @@
         port = reguri->port;
         if(!port || !port[0])
             port = (char *)"5060";
-        snprintf(buffer, sizeof(buffer), "%s:%s@%s:%s",
+        rc = snprintf(buffer, sizeof(buffer), "%s:%s@%s:%s",
             reguri->scheme, reguri->username, reguri->host, port);
+          printf_term(buffer, sizeof(buffer), rc);
 
         // auto-detect registration from ephemerial ports...
         contact_port = atoi(port);
@@ -1644,8 +1751,9 @@
             shell::debug(3, "query rejected for %s; error=%d", reguri->username, error);
         if(voip::make_response_message(context, sevent->tid, error, &reply)) {
             if(error == SIP_OK) {
-                snprintf(buftemp, sizeof(buftemp), "<%s:%s@%s>",
+                rc = snprintf(buftemp, sizeof(buftemp), "<%s:%s@%s>",
                     stack::getScheme(), reguri->username, binding);
+                    printf_term(buftemp, sizeof(buftemp), rc);
                 osip_message_set_contact(reply, buftemp);
             }
             voip::server_allows(reply);
@@ -1680,6 +1788,7 @@
     unsigned count = 0;
     voip::contact_t c = NULL;
     int pos = 0;
+     int rc;
     bool refresh;
 
     if(extension && (extension < registry::getPrefix() || extension >= registry::getPrefix() + registry::getRange())) {
@@ -1743,13 +1852,15 @@
     if(voip::make_response_message(context, sevent->tid, answer, &reply)) {
         if(answer == SIP_OK) {
             if(reginfo->ext) {
-                snprintf(buftemp, sizeof(buftemp), "<%s:%d@%s>;expires=%ld",
+                rc = snprintf(buftemp, sizeof(buftemp), "<%s:%d@%s>;expires=%ld",
                     stack::getScheme(), reginfo->ext, binding, (long)interval);
+                    printf_term(buftemp, sizeof(buftemp), rc);
                 osip_message_set_contact(reply, buftemp);
             }
 
-            snprintf(buftemp, sizeof(buftemp), "<%s:%s@%s>;expires=%ld",
+            rc = snprintf(buftemp, sizeof(buftemp), "<%s:%s@%s>;expires=%ld",
                 stack::getScheme(), reginfo->userid, binding, (long)interval);
+            printf_term(buftemp, sizeof(buftemp), rc);
             osip_message_set_contact(reply, buftemp);
         }
         voip::server_allows(reply);
