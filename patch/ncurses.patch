# Written and placed in public domain by Jeffrey Walton.
# This patch fixes some issues with Ncurses 6.2.
--- progs/tic.c
+++ progs/tic.c
@@ -122,9 +122,11 @@
     free_namelist(namelst);
     _nc_leaks_dump_entry();
 #endif
-    if (tmp_fp != 0)
-	fclose(tmp_fp);
-    if (to_remove != 0) {
+    if (tmp_fp != NULL) {
+    fclose(tmp_fp);
+    tmp_fp = NULL;
+    }
+    if (to_remove != NULL) {
 #if HAVE_REMOVE
 	rc = remove(to_remove);
 #else
@@ -133,6 +135,12 @@
 	if (rc != 0)
 	    perror(to_remove);
     }
+#ifdef NO_LEAKS
+    if (log_fp != NULL) {
+    fclose(log_fp);
+    log_fp = NULL;
+    }
+#endif
 }
 
 static void
@@ -406,7 +414,7 @@
 }
 
 static FILE *
-copy_input(FILE *source, const char *filename, char *alt_file)
+copy_input(FILE **source, const char *filename, char *alt_file)
 {
     char my_altfile[PATH_MAX];
     FILE *result = 0;
@@ -416,17 +424,17 @@
     if (alt_file == 0)
 	alt_file = my_altfile;
 
-    if (source == 0) {
+    if (*source == 0) {
 	failed("copy_input (source)");
     } else if ((target = open_tempfile(alt_file)) == 0) {
 	failed("copy_input (target)");
     } else {
-	clearerr(source);
+	clearerr(*source);
 	for (;;) {
-	    ch = fgetc(source);
-	    if (feof(source)) {
+	    ch = fgetc(*source);
+	    if (feof(*source)) {
 		break;
-	    } else if (ferror(source)) {
+	    } else if (ferror(*source)) {
 		failed(filename);
 	    } else if (ch == 0) {
 		/* don't loop in case someone wants to convert /dev/zero */
@@ -435,7 +443,7 @@
 	    }
 	    fputc(ch, target);
 	}
-	fclose(source);
+	fclose(*source); *source = NULL;
 	/*
 	 * rewind() does not force the target file's data to disk (not does
 	 * fflush()...).  So open a second stream on the data and then close
@@ -443,7 +451,7 @@
 	 * second stream.
 	 */
 	result = fopen(alt_file, "r+");
-	fclose(target);
+	fclose(target); target = NULL;
 	to_remove = strdup(alt_file);
     }
     return result;
@@ -457,7 +465,8 @@
     int mode;
 
     if (!strcmp(filename, "-")) {
-	fp = copy_input(stdin, STDIN_NAME, alt_file);
+	FILE* tp = stdin;
+	fp = copy_input(&tp, STDIN_NAME, alt_file);
     } else if (stat(filename, &sb) < 0) {
 	fprintf(stderr, "%s: %s %s\n", _nc_progname, filename, strerror(errno));
 	ExitProgram(EXIT_FAILURE);
@@ -474,7 +482,7 @@
 	}
 	if (mode != S_IFREG) {
 	    if (alt_file != 0) {
-		FILE *fp2 = copy_input(fp, filename, alt_file);
+		FILE *fp2 = copy_input(&fp, filename, alt_file);
 		fp = fp2;
 	    } else {
 		fprintf(stderr, "%s: %s is not a file\n", _nc_progname, filename);
